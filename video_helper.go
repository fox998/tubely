package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"math"
	"os/exec"
)

type AutoGenerated struct {
	Streams []struct {
		Width  int `json:"width,omitempty"`
		Height int `json:"height,omitempty"`
	} `json:"streams"`
}

func getVideoAspectRatio(filePath string) (string, error) {

	cmd := exec.Command("ffprobe", "-v", "error", "-print_format", "json", "-show_streams", filePath)

	buff := bytes.Buffer{}
	cmd.Stdout = &buff
	err := cmd.Run()
	if err != nil {
		return "", err
	}

	var cmdOut struct {
		Streams []struct {
			Width  int `json:"width,omitempty"`
			Height int `json:"height,omitempty"`
		} `json:"streams"`
	}

	err = json.Unmarshal(buff.Bytes(), &cmdOut)
	if err != nil {
		return "", err
	}

	if len(cmdOut.Streams) == 0 {
		return "", fmt.Errorf("no streams found")
	}

	stream := cmdOut.Streams[0]
	if stream.Width == 0 || stream.Height == 0 {
		return "", fmt.Errorf("with or height is 0, w: %d, h: %d", stream.Width, stream.Height)
	}

	ratio := float64(stream.Height) / float64(stream.Width)
	ratios := map[float64]string{
		9.0 / 16: "landscape",
		16.0 / 9: "portrait",
	}

	for key, value := range ratios {
		if math.Abs(ratio-key) < 0.01 {
			return value, nil
		}
	}

	return "other", nil
}
